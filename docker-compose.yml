version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  air_quality_publisher:
    build: ./air_quality_publisher
    command: python -u air_quality_publisher.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    restart: on-failure
    networks:
      - app-network

  weather_publisher:
    build: ./weather_publisher
    command: python -u weather_publisher.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    restart: on-failure
    networks:
      - app-network

  traffic_publisher:
    build: ./traffic_publisher
    command: python -u traffic_publisher.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    restart: on-failure
    networks:
      - app-network

  environmental_monitor:
    build: ./environmental_monitor
    command: python -u environmental_monitor.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    restart: on-failure
    networks:
      - app-network

  traffic_manager:
    build: ./traffic_manager
    command: python -u traffic_manager.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    restart: on-failure
    networks:
      - app-network

  public_interface:
    build: ./public_interface
    command: python -u public_interface.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    restart: on-failure
    networks:
      - app-network

  # NEW: Flask Backend Service
  backend:
    build: ./backend # Build from the new backend directory
    command: python -u app.py # Run the Flask app
    ports:
      - "5001:5001" # Expose port 5000 for the frontend to access
    depends_on:
      kafka:
        condition: service_healthy # Ensure Kafka is healthy before starting
    environment:
      - PYTHONUNBUFFERED=1 # Ensure Python output is unbuffered
    restart: on-failure
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
